import matplotlib.pyplot as plt
import numpy as np


def draw_heatmap(data):
    # 确保输入列表的长度是某个自然数的平方
    n = int(np.sqrt(len(data)))
    if n ** 2 != len(data):
        raise ValueError("输入列表的元素数量必须是某个自然数的平方")

    # 将输入的列表转换成n x n的矩阵
    matrix = np.reshape(data, (n, n))

    # 使用matplotlib绘制热量图
    plt.figure(figsize=(5, 5))
    # 使用'Reds'颜色映射来表示数值大小，其中较小的数值将显示为更接近白色的浅红色，较大的数值显示为深红色
    plt.imshow(matrix, cmap='Reds', interpolation='nearest')
    # 添加颜色条以指示颜色与数值的对应关系
    plt.colorbar()
    plt.title('Heatmap Representation')
    plt.show()


# 示例使用
data_example_PTC_MM=[61.60,
62.46,
65.16,
64.57,
62.47,
61.28,
66.66,
66.96,
64.28,
59.54,
60.43,
60.15,
63.99,
63.69,
58.28,
62.17,
59.52,
60.44,
62.19,
61.02,
58.01,
57.73,
62.47,
58.90,
61.97,
63.68,
63.09,
61.57,
60.99,
63.12,
62.21,
60.44,
62.77,
63.99,
64.56,
62.17,
63.09,
62.79,
60.73,
58.61,
62.83,
59.55,
63.39,
64.24,
59.81,
62.99,
66.09,
68.39,
65.44
]
data_example_PTC_FR=[64.11,
62.38,
63.24,
64.38,
66.94,
62.97,
63.52,
64.09,
63.53,
63.53,
65.25,
60.12,
63.24,
64.95,
67.53,
63.79,
63.81,
66.64,
65.25,
65.52,
64.69,
64.94,
65.25,
66.93,
63.22,
65.80,
62.95,
66.10,
66.08,
70.36,
65.79,
66.37,
65.25,
63.25,
64.67,66.09,62.70,
66.66,
65.22,
66.10,
61.83,65.51,68.96,65.24,65.82,
63.24,
64.95,
64.93,
66.70
]
data_example_MUTAG =[82.49,

82.49,

79.36,

82.02,

83.07,

81.43,

81.96,

77.19,
83.51,
84.09,
81.99,
85.64,
84.09,
81.93,
86.20,
84.56,
83.57,
84.56,
83.01,
83.57,
82.98,
82.46,
81.93,
84.59,
83.54,
85.67,
81.93,
85.67,
84.59,
84.68,
86.73,
84.62,
84.65,
85.67,
83.48,
84.59,
83.01,
85.12,
85.15,
81.40,
84.62,
79.30,
79.39,
81.99,
82.51,
79.82,
84.65,
79.30,
79.82,
78.25,
82.40,
79.88,
78.25,
81.99,
81.96,
82.46,
84.06,
84.56,
83.54,
83.04,
85.70,
86.17,
87.78,
85.18]
# data_example_MUTAG = [1, 2, 3, 4, 5, 6, 7, 8, 9]  # 这是一个3x3矩阵的示例数据
data_example_MUTAG_new=[80.91,

80.91,

81.96,

78.16,

83.57,

83.04,

83.60,

84.65,

85.73,

79.88,

86.75,

85.23,

75.61,

83.63,

83.54,

83.01,

80.88,

83.04,

84.62,

80.35,

82.46,

78.77,

76.64,

79.82,

77.19,

77.78,

79.82,

80.35,

84.65,

84.65,

82.49,
84.09,
83.54,

82.98,

83.01,

83.57,
82.46,
85.15,
85.15,
82.49
,
81.93,
80.32
,
85.15,
85.20,
85.61,
82.49,

86.70,

87.84
,
85.15
]
draw_heatmap(data_example_MUTAG_new)

import matplotlib.pyplot as plt


def plot_separate_experiment_results(data1, data2, data3, data4):
    """
    绘制四条折线图，每条线使用不同的数据集。

    参数:
    - data1, data2, data3, data4: 四个列表，每个列表的元素都是成对的(x, y)坐标。
    """
    # 确保每个数据列表中的元素数量都是偶数
    for data in [data1, data2, data3, data4]:
        if len(data) % 2 != 0:
            raise ValueError("每个输入列表的元素数量必须是偶数")

    # 分别为每条线提取x和y坐标，并绘制
    colors = ['red', 'blue', 'green', 'purple']
    labels = ['Line 1', 'Line 2', 'Line 3', 'Line 4']

    plt.figure(figsize=(10, 6))

    for i, data in enumerate([data1, data2, data3, data4]):
        x_coords = data[::2]
        y_coords = data[1::2]
        plt.plot(x_coords, y_coords, color=colors[i], label=labels[i])

    # 添加图例
    plt.legend()

    # 添加标题和轴标签
    plt.title('Separate Experiment Results')
    plt.xlabel('X-axis')
    plt.ylabel('Y-axis')

    # 显示图形
    plt.show()


# 示例数据

data1 = [-3,83.54,-2,85.67,-1,81.93,0,85.67,1, 84.59,2, 84.68,3, 86.73]
data2 = [-2,63.12,
-1,65.19,
0,61.91,
1, 61.08,
2,65.45,
3,64.22,
4,61.32]
data3 = [-2,61.32,
-1,65.25,
0,64.68,
1,65.52,
2,62.40,
3,66.96,
4,64.39]
data4 = [-3,54.99,
-2,55.53,
-1,58.17,
0,56.45,
1,56.42,
2,55.28,
3,56.71]

# 使用函数绘制图形
# plot_separate_experiment_results(data1, data2, data3, data4)
